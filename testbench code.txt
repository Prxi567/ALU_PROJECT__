`include "ALU.v"
`define PASS 1'b1
`define FAIL 1'b0
`define no_of_testcase 100

module test_bench_alu #( parameter N=8, M=4)();
  localparam test_case_width = 19 + (2*N) + (2*N+1) + M;
  localparam response_width = test_case_width + 6 + (2*N) + 1;
  localparam result_width = (2*N) + 1 + 6;
  localparam scoreboard_width = (6 + 2*N + 1) + 8 + (6 + 2*N + 1);

  reg [test_case_width-1:0] curr_test_case = {test_case_width{1'b0}};
  reg [test_case_width-1:0] stimulus_mem [0:`no_of_testcase-1];
  reg [response_width-1:0] response_packet;

  integer i, j;
  reg CLK, RST, CE;
  event fetch_stimulus;
  reg [N-1:0] A, B;
  reg [M-1:0] CMD;
  reg MODE, CIN;
  reg [7:0] Feature_ID;
  reg [2:0] Comparison_EGL;
  reg [2*N:0] Expected_RES;
  reg err, cout, ov;
  reg [1:0] INP_VALID;

  wire [2*N:0] RES;
  wire ERR, OFLOW, COUT;
  wire [2:0] EGL;
  wire [result_width-1:0] expected_data;
  reg [result_width-1:0] exact_data;

  ALU #(N, M) dut (
    .A(A), .B(B), .cin(CIN), .clk(CLK), .rst(RST), .valid(INP_VALID),
    .cmd(CMD), .ce(CE), .mode(MODE), .carry_out(COUT), .overflow(OFLOW),
    .result(RES), .gt(EGL[1]), .eq(EGL[2]), .lt(EGL[0]), .err(ERR)
  );

  integer stim_mem_ptr = 0, stim_stimulus_mem_ptr = 0, fid = 0, pointer = 0;
  initial begin
    CLK = 0;
    forever #60 CLK = ~CLK;
  end

  task read_stimulus();
    begin
      #10 $readmemb("stimulus.txt", stimulus_mem);
      $display("[INFO] Stimulus loaded from stimulus.txt");
    end
  endtask

  always @(fetch_stimulus) begin
    curr_test_case = stimulus_mem[stim_mem_ptr];
    $display("[FETCH] Testcase %0d: %b", stim_mem_ptr, curr_test_case);
    stim_mem_ptr = stim_mem_ptr + 1;
  end

  task driver();
    begin
      -> fetch_stimulus;
      @(posedge CLK);
      Feature_ID = curr_test_case[(test_case_width-1)-:8];
      INP_VALID = curr_test_case[(test_case_width-9) -: 2];
      A = curr_test_case[(test_case_width - 11) -: N];
      B = curr_test_case[(test_case_width - 11 - N) -: N];
      CMD = curr_test_case[(test_case_width - 11 - 2*N) -: 4];
      CIN = curr_test_case[(test_case_width - 11 - 2*N - M)];
      CE = curr_test_case[(test_case_width - 11 - 2*N - M - 1)];
      MODE = curr_test_case[(test_case_width - 11 - 2*N - M - 2)];
      Expected_RES = curr_test_case[(test_case_width - 11 - 2*N - M - 3) -: 2*N+1];
      cout = curr_test_case[5];
      Comparison_EGL = curr_test_case[4:2];
      ov = curr_test_case[1];
      err = curr_test_case[0];

      $display("[DRIVER] Feature ID: %b, A: %b, B: %b, CMD: %b, CIN: %b, CE: %b, MODE: %b, INP_VALID: %b",
                Feature_ID, A, B, CMD, CIN, CE, MODE, INP_VALID);
      $display("[DRIVER] Expected_RES: %b, COUT: %b, EGL: %b, OV: %b, ERR: %b",
                Expected_RES, cout, Comparison_EGL, ov, err);
    end
  endtask

  task global_init();
    begin
      curr_test_case = {test_case_width{1'b0}};
      response_packet = {response_width{1'b0}};
      stim_mem_ptr = 0;
    end
  endtask

  task monitor();
    begin
      repeat(4) @(posedge CLK);
      #5 begin
        response_packet[test_case_width-1:0] = curr_test_case;
        response_packet[test_case_width +: 5] = {ERR, OFLOW, EGL, COUT};
        response_packet[test_case_width+5 +: 2*N+1] = RES;
        exact_data = {RES, COUT, EGL, OFLOW, ERR};

        $display("[MONITOR] RES: %b, COUT: %b, EGL: %b, OVF: %b, ERR: %b", RES, COUT, EGL, OFLOW, ERR);
      end
    end
  endtask

  assign expected_data = {Expected_RES, cout, Comparison_EGL, ov, err};

  reg [scoreboard_width-1:0] scb_stimulus_mem [0:`no_of_testcase-1];

  task score_board();
    reg [6+2*N:0] expected_res;
    reg [7:0] feature_id;
    reg [6+2*N:0] response_data;
    begin
      #5;
      feature_id = curr_test_case[(test_case_width -1) -: 8];
      expected_res = curr_test_case[(test_case_width - 11 - 2*N - M) -: 2*N+1];
      response_data = response_packet[test_case_width +:(2*N+7)];

      $display("[SCOREBOARD] Expected: %b", expected_data);
      $display("[SCOREBOARD] Actual  : %b", exact_data);

      if (expected_data === exact_data) begin
        $display("[RESULT] Test %0d PASSED", stim_stimulus_mem_ptr);
        scb_stimulus_mem[stim_stimulus_mem_ptr] = {1'b0, Feature_ID, expected_data, response_data, 1'b0, `PASS};
      end else begin
        $display("[RESULT] Test %0d FAILED", stim_stimulus_mem_ptr);
        scb_stimulus_mem[stim_stimulus_mem_ptr] = {1'b0, Feature_ID, expected_data, response_data, 1'b0, `FAIL};
      end
      stim_stimulus_mem_ptr = stim_stimulus_mem_ptr + 1;
    end
  endtask

  task dut_reset();
    begin
      CE = 1;
      $display("[RESET] DUT reset started");
      #10 RST = 1;
      #20 RST = 0;
      $display("[RESET] DUT reset complete");
    end
  endtask

  task gen_report();
    integer file_id, pointer, i;
    begin
      file_id = $fopen("results.txt", "w");
      pointer = 0;
      while (pointer < `no_of_testcase) begin
        $fdisplay(file_id, "Feature ID %8b : %s",
                 scb_stimulus_mem[pointer][scoreboard_width-2 -: 8],
                 scb_stimulus_mem[pointer][0] ? "PASS" : "FAIL");
        pointer = pointer + 1;
      end
      $fclose(file_id);
      $display("[INFO] Report generated: results.txt");
    end
  endtask

  initial begin
    #10;
    $display("\n=== Starting ALU Verification ===");
    global_init();
    dut_reset();
    read_stimulus();

    for (j = 0; j <= `no_of_testcase - 1; j = j + 1) begin
      $display("\n=====================");
      $display("[TESTCASE] Executing Testcase %0d", j);
      $display("=====================");
      fork
        driver();
        monitor();
      join
      score_board();

      if (j == (`no_of_testcase / 2)) begin
        #20;
        $display("\n[INFO] Performing mid-test reset...");
        dut_reset();
      end
    end

    gen_report();
    $fclose(fid);
    #100 $display("\n=== Verification Complete ===");
    $finish();
  end
endmodule
